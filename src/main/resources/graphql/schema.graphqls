type Query {
  # Student Queries
  students: [Student]
  studentById(id: ID!): Student
  studentByEmail(email: String!): Student
  studentByUserName(userName: String!): Student

  # Administrator Queries
  administrators: [Administrator]
  administratorById(id: ID!): Administrator

  # Guest Queries
  navigateExplore: String
  signUp(username: String!, password: String!): String

  # Student Additional Queries
  signIn(username: String!, password: String!): String
  joinPublicRoom(roomId: String!): String
  receiveNotifications: String
}

type Mutation {
  # Student Mutations
  updateStudent(id: ID!, student: StudentInput!): Student
  deleteStudent(id: ID!): Boolean
  chat(message: String!): String
  createPrivateRoom(roomName: String!): String
  manageProfile(profileData: String!): String
  reportUser(userId: String!): String
  acceptInvitation(invitationId: String!): String
  rejectInvitation(invitationId: String!): String

  # Administrator Mutations
  createAdministrator(admin: AdministratorInput!): Administrator
  updateAdministrator(id: ID!, admin: AdministratorInput!): Administrator
  deleteAdministrator(id: ID!): Boolean

  # Member Mutations
  shareScreen(roomId: String!): String

  # Moderator Mutations
  inviteStudents(roomId: String!, studentId: String!): String
  kickMember(roomId: String!, memberId: String!): String
  promoteMember(roomId: String!, memberId: String!): String
}

# Base User interface
interface User {
  id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  password: String!
}

# Student type extending User
type Student implements User {
  id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  password: String!
  major: String!
  dob: String!
  interest: [Interests]
  participations: [Participation!]!
  memberships: [Membership!]!
}

# Administrator type extending User
type Administrator implements User {
  id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  password: String!
}

# Room Interface
interface Room {
  id: ID!
  name: String!
  description: String!
  createdAt: String!
  messages: [Message!]!
}

# Private Room extending Room
type PrvRoom implements Room {
  id: ID!
  name: String!
  description: String!
  createdAt: String!
  messages: [Message!]!
  isPrivate: Boolean!
  createdBy: ID!
  memberships: [Membership!]!
}

# Public Room extending Room
type PubRoom implements Room {
  id: ID!
  name: String!
  description: String!
  createdAt: String!
  messages: [Message!]!
  participation: [Participation!]!
}

# Membership entity for Private Rooms
type Membership {
  id: ID!
  student: Student!
  room: PrvRoom!
  role: Role!
  isActive: Boolean!
  joinAt: String!
  leaveAt: String
}

# Participation entity for Public Rooms
type Participation {
  id: ID!
  participant: Student!
  pubRoom: PubRoom!
  joinedAt: String!
  leftAt: String
}

# Message entity
type Message {
  id: ID!
  room: Room!
  sender_id: ID!
  content: String!
  type: MessageType!
  timestamp: String!
}

# Enums
enum MessageType {
  TEXT
  IMAGE
}

enum Role {
  ADMIN
  MEMBER
}

enum Majors {
    COMPUTER_SCIENCE
    MATHEMATICS
    PHYSICS
    CHEMISTRY
    BIOLOGY
    HISTORY
    ART
}

enum Interests {
    MATH
    SCIENCE
    HISTORY
    LITERATURE
    ART
    TECHNOLOGY
    PHYSICS
    CHEMISTRY
    BIOLOGY
}

input StudentInput {
  firstName: String
  lastName: String
  userName: String
  email: String
  password: String
  major: String
  dob: String
  interest: [Interests]
}

input AdministratorInput {
  firstName: String
  lastName: String
  userName: String
  email: String
  password: String
}
